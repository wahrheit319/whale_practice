```{r}
# Load packages
library(tidyverse)
library(janitor)
library(rstan)
library(bayesplot)
library(bayesrules)
library(ggformula)
```

```{r}
# STEP 1: DEFINE the model
bb_model <- "
  data {
    int<lower = 0, upper = 10> Y; // number of success, it could be any integer between 0 and 10
  }
  parameters {
    real<lower = 0, upper = 1> pi; // probability of success, it could be any real number between 0 and 1
  }
  model {
    Y ~ binomial(10, pi);
    pi ~ beta(2, 2);
  }
"
```

```{r}
# STEP 2: SIMULATE the posterior
bb_sim <- stan(model_code = bb_model, 
               data = list(Y = 9),  # observed 9 success out of 10
               chains = 4,  # number of parallel Markov chains, different number of pi
               iter = 5000*2, # number of iteration, first half is burn-in
               seed = 84735) # set a seed

# total of 4 chain, each running 10000 iterations, 
# and throw away the first 5000 iterations of each chain for burn in, 
# then we get 4 chain each size 5000 iterations, total of 20000.
```

```{r}
as.array(bb_sim, pars = "pi") %>% 
  head(4)
```
```{r}
mcmc_trace(bb_sim, pars = "pi", size = 0.1)
```

```{r}
# Histogram of the Markov chain values
mcmc_hist(bb_sim, pars = "pi") + 
  yaxis_text(TRUE) + 
  ylab("count")

# Density plot of the Markov chain values
mcmc_dens(bb_sim, pars = "pi") + 
  yaxis_text(TRUE) + 
  ylab("density")
```

Comparing parallel chains

```{r}
# Density plots of individual chains
mcmc_dens_overlay(bb_sim, pars = "pi") + 
  ylab("density")
```

```{r}
# STEP 2: SIMULATE the posterior
bb_sim_short <- stan(model_code = bb_model, data = list(Y = 9), 
                     chains = 4, iter = 50*2, seed = 84735)
```

```{r}
# Trace plots of short chains
mcmc_trace(bb_sim_short, pars = "pi")

# Density plots of individual short chains
mcmc_dens_overlay(bb_sim_short, pars = "pi")
```

Calculating effective sample size & autocorrelation
```{r}
# Calculate the effective sample size ratio
neff_ratio(bb_sim, pars = c("pi"))
```

```{r}
mcmc_trace(bb_sim, pars = "pi")
mcmc_acf(bb_sim, pars = "pi")
```

```{r}
# Simulate a thinned MCMC sample
thinned_sim <- stan(model_code = bb_model, data = list(Y = 9), 
                    chains = 4, iter = 5000*2, seed = 84735, thin = 10)

# Check out the results
mcmc_trace(thinned_sim, pars = "pi")
mcmc_acf(thinned_sim, pars = "pi")
```
Calculating R-hat
```{r}
rhat(bb_sim, pars = "pi")
```

