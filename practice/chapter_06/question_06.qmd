```{r}
# Load packages
library(tidyverse)
library(janitor)
library(rstan)
library(bayesplot)
library(bayesrules)
```

```{r}
# a
# Step 1: Define grid values
grid_data <- data.frame(lambda_grid = 0:8)

# Data points
data_points <- c(0, 1, 0)

# Step 2: Evaluate the prior & likelihood at each lambda
grid_data <- grid_data |> 
  mutate(prior = dgamma(lambda_grid, shape = 20, rate = 5),
         likelihood = sapply(lambda_grid, function(lambda) prod(dpois(data_points, lambda))))

# Step 3: Approximate the posterior
grid_data <- grid_data |> 
  mutate(unnormalized = likelihood * prior,
         posterior = unnormalized / sum(unnormalized))

# Examine the grid approximated posterior
print(round(grid_data, 2))

# Plot the grid approximated posterior
ggplot(grid_data, aes(x = lambda_grid, y = posterior)) + 
  geom_point() + 
  geom_segment(aes(x = lambda_grid, xend = lambda_grid, y = 0, yend = posterior))
```

```{r}
# b
# Step 1: Define a grid of 201 values
grid_data <- data.frame(lambda_grid = seq(from = 0, to = 8, length = 201))

# Step 2: Evaluate the prior & likelihood at each lambda
grid_data <- grid_data |> 
  mutate(prior = dgamma(lambda_grid, shape = 20, rate = 5),
         likelihood = sapply(lambda_grid, function(lambda) prod(dpois(data_points, lambda))))

# Step 3: Approximate the posterior
grid_data <- grid_data |> 
  mutate(unnormalized = likelihood * prior,
         posterior = unnormalized / sum(unnormalized))

# Examine the grid approximated posterior
print(round(grid_data, 2))

# Plot the grid approximated posterior
ggplot(grid_data, aes(x = lambda_grid, y = posterior)) + 
  geom_point() + 
  geom_segment(aes(x = lambda_grid, xend = lambda_grid, y = 0, yend = posterior))

```

