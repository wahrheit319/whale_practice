```{r}
# Load packages
library(bayesrules)
library(tidyverse)
library(rstan)
library(bayesplot)
library(broom.mixed)
library(janitor)
```

```{r}
# Load data
data("moma_sample")
```

Posterior Inference & Prediction
```{r}
moma_sample %>% 
  group_by(genx) %>% 
  tally()
```

```{r}
plot_beta_binomial(alpha = 4, beta = 6, y = 14, n = 100)
```

Posterior estimation
```{r}
# 0.025th & 0.975th quantiles of the Beta(18,92) posterior
qbeta(c(0.025, 0.975), 18, 92)
```

```{r}
# 0.25th & 0.75th quantiles of the Beta(18,92) posterior
qbeta(c(0.25, 0.75), 18, 92)
```

```{r}
# 0.005th & 0.995th quantiles of the Beta(18,92) posterior
qbeta(c(0.005, 0.995), 18, 92)
```

Posterior hypothesis testing
```{r}
# Posterior probability that pi < 0.20
post_prob <- pbeta(0.20, 18, 92)
post_prob
```

```{r}
# Posterior odds
post_odds <- post_prob / (1 - post_prob)
post_odds
```

```{r}
# Prior probability that pi < 0.2
prior_prob <- pbeta(0.20, 4, 6)
prior_prob
```

```{r}
# Prior odds
prior_odds <- prior_prob / (1 - prior_prob)
prior_odds
```

```{r}
# Bayes factor
BF <- post_odds / prior_odds
BF
```

Posterior simulation
```{r}
# STEP 1: DEFINE the model
art_model <- "
  data {
    int<lower = 0, upper = 100> Y;
  }
  parameters {
    real<lower = 0, upper = 1> pi;
  }
  model {
    Y ~ binomial(100, pi);
    pi ~ beta(4, 6);
  }
"

# STEP 2: SIMULATE the posterior
art_sim <- stan(model_code = art_model, data = list(Y = 14), 
                chains = 4, iter = 5000*2, seed = 84735)
```

```{r}
# Parallel trace plots & density plots
mcmc_trace(art_sim, pars = "pi", size = 0.5) + 
  xlab("iteration")
mcmc_dens_overlay(art_sim, pars = "pi")

# Autocorrelation plot
mcmc_acf(art_sim, pars = "pi")
```

```{r}
# Markov chain diagnostics
rhat(art_sim, pars = "pi")
neff_ratio(art_sim, pars = "pi")
```

Posterior estimation & hypothesis testing
```{r}
# The actual Beta(18, 92) posterior
plot_beta(alpha = 18, beta = 92) + 
  lims(x = c(0, 0.35))

# MCMC posterior approximation
mcmc_dens(art_sim, pars = "pi") + 
  lims(x = c(0,0.35))
```

```{r}
tidy(art_sim, conf.int = TRUE, conf.level = 0.95)
```

```{r}
# Shade in the middle 95% interval
mcmc_areas(art_sim, pars = "pi", prob = 0.95)
```

```{r}
# Store the 4 chains in 1 data frame
art_chains_df <- as.data.frame(art_sim, pars = "lp__", include = FALSE)
dim(art_chains_df)
```

```{r}
# Calculate posterior summaries of pi
art_chains_df %>% 
  summarize(post_mean = mean(pi), 
            post_median = median(pi),
            post_mode = sample_mode(pi),
            lower_95 = quantile(pi, 0.025),
            upper_95 = quantile(pi, 0.975))
```

```{r}
# Tabulate pi values that are below 0.20
art_chains_df %>% 
  mutate(exceeds = pi < 0.20) %>% 
  tabyl(exceeds)
```

Posterior prediction
```{r}
# Set the seed
set.seed(1)

# Predict a value of Y' for each pi value in the chain
art_chains_df <- art_chains_df %>% 
  mutate(y_predict = rbinom(length(pi), size = 20, prob = pi))

# Check it out
art_chains_df %>% 
  head(3)
```

```{r}
# Plot the 20,000 predictions
ggplot(art_chains_df, aes(x = y_predict)) + 
  stat_count()
```

```{r}
art_chains_df %>% 
  summarize(mean = mean(y_predict),
            lower_80 = quantile(y_predict, 0.1),
            upper_80 = quantile(y_predict, 0.9))
```

