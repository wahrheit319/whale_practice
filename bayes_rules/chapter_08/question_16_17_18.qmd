```{r}
# Load packages
library(bayesrules)
library(tidyverse)
library(rstan)
library(bayesplot)
library(broom.mixed)
library(janitor)
```

16
```{r}
# a
# STEP 1: DEFINE the model
climate_model <- "
  data {
    int<lower = 0, upper = 1000> Y;
  }
  parameters {
    real<lower = 0, upper = 1> pi;
  }
  model {
    Y ~ binomial(1000, pi); // binom likelihood, 1000 survey
    pi ~ beta(1, 2); // prior
  }
"

# STEP 2: SIMULATE the posterior
climate_sim <- stan(model_code = climate_model, data = list(Y = 150), 
                    chains = 4, iter = 10000, seed = 84735)

```

```{r}
# b
# Parallel trace plots & density plots
mcmc_trace(climate_sim, pars = "pi", size = 0.5) + 
  xlab("iteration")
mcmc_dens_overlay(climate_sim, pars = "pi")

# Autocorrelation plot
mcmc_acf(climate_sim, pars = "pi")
```

```{r}
# c
# Markov chain diagnostics
rhat(climate_sim, pars = "pi")
neff_ratio(climate_sim, pars = "pi")
```

17
```{r}
# The actual Beta(851, 152) posterior
plot_beta(alpha = 851, beta = 152) 

# MCMC posterior approximation
mcmc_dens(climate_sim, pars = "pi") + 
  lims(x = c(0,0.35))
```

```{r}
# a
tidy(climate_sim, conf.int = TRUE, conf.level = 0.95)
```

```{r}
# Shade in the middle 95% interval
mcmc_areas(climate_sim, pars = "pi", prob = 0.95)
```

```{r}
# Store the 4 chains in 1 data frame
climate_chains_df <- as.data.frame(climate_sim, pars = "lp__", include = FALSE)
dim(climate_chains_df)
```

```{r}
# Calculate posterior summaries of pi
climate_chains_df |> 
  summarize(post_mean = mean(pi), 
            post_median = median(pi),
            post_mode = sample_mode(pi),
            lower_95 = quantile(pi, 0.025),
            upper_95 = quantile(pi, 0.975))
```

```{r}
# b
# Tabulate pi values that are above 0.10
climate_chains_df |>
  mutate(exceeds = pi > 0.10) |> 
  tabyl(exceeds)
```

18
```{r}
# a
# Set the seed
set.seed(1)

# Predict a value of Y' for each pi value in the chain
climate_chains_df <- climate_chains_df |> 
  mutate(y_predict = rbinom(length(pi), size = 100, prob = pi))

# Check it out
climate_chains_df |>
  head(3)
```

```{r}
# a
# Plot
ggplot(climate_chains_df, aes(x = y_predict)) + 
  stat_count()
```

```{r}
# c
climate_chains_df |>
  summarize(mean = mean(y_predict),
            lower_80 = quantile(y_predict, 0.1),
            upper_80 = quantile(y_predict, 0.9))
```

```{r}
# c
climate_chains_df |>
  summarize(prob_at_least_20_not = mean(y_predict <= 80))
```

```{r}
# c
mean(climate_chains_df$y_predict >= 20)
```

